#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Dec 16 03:13:38 2011

import wx, wx.richtext, wx.grid, wx.lib.intctrl
import sys, os, re

# Climb the tree to find out where we are
p = os.path.abspath(__file__)
t = ""
while t != "src":
    (p, t) = os.path.split(p)
    if p == "":
        print "I have no idea where I am; this is ridiculous"
        sys.exit(1)

sys.path.append(os.path.join(p,"src","lib"))

import project
from copy import deepcopy
from numpy import *
import subprocess
import socket

import handlerSubsystem
from hsubParsingUtils import parseCallString
import lib.handlers.handlerTemplates as ht
import lib.globalConfig
from lib.hsubConfigObjects import ExperimentConfig, RobotConfig
# begin wxGlade: extracode
# end wxGlade

CALIB_PORT = 23460

def drawParamConfigPane(target, method, proj):
    if target.GetSizer() is not None:
        target.GetSizer().Clear(deleteWindows=True)

    list_sizer = wx.BoxSizer(wx.VERTICAL)

    label_info = wx.StaticText(target, -1, method.comment)
    label_info.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
    static_line = wx.StaticLine(target, -1)
    list_sizer.Add(label_info, 0, wx.ALL|wx.EXPAND, 5)
    list_sizer.Add(static_line, 0, wx.EXPAND, 0)

    param_controls = {}
    for p in method.para:
        #print "name: %s, para_type: %s, default: %s, value: %s" % (p.name, p.para_type, p.default, p.value)
        item_sizer = wx.BoxSizer(wx.HORIZONTAL)
        param_label = wx.StaticText(target, -1, "%s:" % p.name)

        if p.para_type is None:
            continue

        if p.para_type.lower() == "region":
            r_names = [r.name for r in proj.rfi.regions if r.name.lower() != "boundary" and not r.isObstacle]
            param_controls[p] = wx.ComboBox(target, -1, choices=r_names, style=wx.CB_DROPDOWN)

            if p.value is not None and p.value in r_names:
                param_controls[p].SetStringSelection(p.value)
            elif p.default is not None and p.value in r_names:
                p.value = p.default
                param_controls[p].SetStringSelection(p.default)
            else:
                p.value = r_names[0]
                param_controls[p].SetSelection(0)
        elif p.para_type.lower().startswith("bool"):
            param_controls[p] = wx.CheckBox(target, -1, "")
            if p.value is not None:
                param_controls[p].SetValue(p.value)
            elif p.default is not None:
                p.value = p.default
                param_controls[p].SetValue(p.default)
            else:
                p.value = "False"
                param_controls[p].SetValue(False)
        elif p.para_type.lower().startswith("int"):
            param_controls[p] = wx.lib.intctrl.IntCtrl(target, -1, 0)
            if p.min_val is not None:
                param_controls[p].SetMin(p.min_val)
                param_controls[p].SetLimited(True)
            if p.max_val is not None:
                param_controls[p].SetMax(p.max_val)
                param_controls[p].SetLimited(True)

            if p.value is not None:
                param_controls[p].SetValue(p.value)
            elif p.default is not None:
                p.value = p.default
                param_controls[p].SetValue(p.default)
            else:
                p.value = "0"
                param_controls[p].SetValue(0)
        else:
            if p.value is not None:
                param_controls[p] = wx.TextCtrl(target, -1, str(p.value))
            elif p.default is not None:
                p.value = p.default
                param_controls[p] = wx.TextCtrl(target, -1, str(p.default))
            else:
                p.value = ""
                param_controls[p] = wx.TextCtrl(target, -1, "")

        param_label.SetToolTip(wx.ToolTip(p.desc))
        item_sizer = wx.BoxSizer(wx.HORIZONTAL)
        item_sizer.Add(param_label, 0, wx.ALL, 5)
        item_sizer.Add(param_controls[p], 1, wx.ALL, 5)
        list_sizer.Add(item_sizer, 0, wx.EXPAND, 0)

    # TODO: is there a better way to do this?
    def paramPaneCallback(event):
        this_param = None

        for p in method.para:
            if event.GetEventObject() is param_controls[p]:
                this_param = p
                break

        if this_param is None:
            # Ignore; from another control (e.g. calib matrix)
            return

        this_param.setValue(param_controls[this_param].GetValue())

    target.Bind(wx.EVT_TEXT, paramPaneCallback)
    target.Bind(wx.EVT_COMBOBOX, paramPaneCallback)
    target.Bind(wx.EVT_CHECKBOX, paramPaneCallback)
    target.Bind(wx.lib.intctrl.EVT_INT, paramPaneCallback)

    target.SetSizer(list_sizer)
    target.Layout()

    label_info.Wrap(list_sizer.GetSize()[0])



class regionTagsDialog(wx.Dialog):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: regionTagsDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_5 = wx.StaticText(self, wx.ID_ANY, "Tags:")
        self.list_box_tags = wx.ListBox(self, wx.ID_ANY, choices=[], style=wx.LB_SINGLE)
        self.button_add_tag = wx.Button(self, wx.ID_ADD, "")
        self.button_remove_tag = wx.Button(self, wx.ID_REMOVE, "")
        self.label_12 = wx.StaticText(self, wx.ID_ANY, "Regions:")
        self.list_box_regions = wx.CheckListBox(self, wx.ID_ANY, choices=[])
        self.static_line_2 = wx.StaticLine(self, wx.ID_ANY)
        self.button_5 = wx.Button(self, wx.ID_OK, "")
        self.button_8 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.onClickTag, self.list_box_tags)
        self.Bind(wx.EVT_BUTTON, self.onClickAddTag, self.button_add_tag)
        self.Bind(wx.EVT_BUTTON, self.onClickRemoveTag, self.button_remove_tag)
        # end wxGlade

        self.proj = parent.proj

        self.Bind(wx.EVT_CHECKLISTBOX, self.onCheckRegion, self.list_box_regions)

    def __set_properties(self):
        # begin wxGlade: regionTagsDialog.__set_properties
        self.SetTitle("Edit Region Tags...")
        self.SetSize((577, 419))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: regionTagsDialog.__do_layout
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(self.label_5, 0, 0, 0)
        sizer_33.Add(self.list_box_tags, 1, wx.TOP | wx.BOTTOM | wx.EXPAND, 5)
        sizer_36.Add(self.button_add_tag, 0, 0, 0)
        sizer_36.Add(self.button_remove_tag, 0, wx.LEFT, 10)
        sizer_33.Add(sizer_36, 0, wx.EXPAND, 0)
        sizer_32.Add(sizer_33, 1, wx.RIGHT | wx.EXPAND, 5)
        sizer_35.Add(self.label_12, 0, 0, 0)
        sizer_35.Add(self.list_box_regions, 1, wx.TOP | wx.EXPAND, 5)
        sizer_32.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_31.Add(sizer_32, 1, wx.ALL | wx.EXPAND, 5)
        sizer_31.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_34.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_34.Add(self.button_5, 0, wx.RIGHT, 10)
        sizer_34.Add(self.button_8, 0, 0, 0)
        sizer_31.Add(sizer_34, 0, wx.ALL | wx.EXPAND, 10)
        self.SetSizer(sizer_31)
        self.Layout()
        # end wxGlade

    def _tags2dialog(self, tags):
        self.tags = tags

        # Populate tags and regions
        self.list_box_tags.Set(self.tags.keys())

        if self.list_box_tags.GetCount() > 0:
            self.list_box_tags.SetSelection(0)
            self.button_remove_tag.Enable(True)
            self.onClickTag(None)
        else:
            self.button_remove_tag.Enable(False)

    def onCheckRegion(self, event):
        tag = self.list_box_tags.GetStringSelection()
        self.tags[tag] = self.list_box_regions.GetCheckedStrings()

        event.Skip()

    def onClickTag(self, event):  # wxGlade: regionTagsDialog.<event_handler>
        if event is not None:
            tag = event.GetString()
        else:
            tag = self.list_box_tags.GetStringSelection()

        if tag == '':
            self.list_box_regions.Set([])
            return

        self.list_box_regions.Set([r.name for r in self.proj.rfi.regions if r.name.lower() != "boundary" and not r.isObstacle])

        for i, rname in enumerate(self.list_box_regions.GetItems()):
            self.list_box_regions.Check(i, rname in self.tags[tag])

        if event is not None:
            event.Skip()

    def onClickAddTag(self, event):  # wxGlade: regionTagsDialog.<event_handler>
        # Ask the user for a tag name
        name = wx.GetTextFromUser("Name:", "New Tag")

        if name != "":
            if name in self.tags:
                wx.MessageBox("Tag with that name already exists.", "Invalid tag name",
                            style = wx.OK | wx.ICON_ERROR)
                return

            # If it's valid, add it, select it and enable it
            self.list_box_tags.Insert(name, self.list_box_tags.GetCount())
            self.list_box_tags.Select(self.list_box_tags.GetCount()-1)
            self.tags[name] = []
            self.onClickTag(None)
            self.button_remove_tag.Enable(True)

        event.Skip()

    def onClickRemoveTag(self, event):  # wxGlade: regionTagsDialog.<event_handler>
        numel = self.list_box_tags.GetCount()

        if numel > 0:
            pos = self.list_box_tags.GetSelection()
            tag = self.list_box_tags.GetStringSelection()

            self.list_box_tags.Delete(pos)
            del self.tags[tag]

            if pos == numel - 1:
                # If the very last element was deleted, move the selection up one
                newpos = pos - 1
            else:
                newpos = pos

            if newpos != -1:
                self.list_box_tags.Select(newpos)
            else:
                self.button_remove_tag.Enable(False)

            self.onClickTag(None)

        event.Skip()

# end of class regionTagsDialog

class handlerConfigDialog(wx.Dialog):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: handlerConfigDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_configs = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.button_defaults = wx.Button(self, wx.ID_ANY, "Reset to Defaults")
        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_1 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onClickDefaults, self.button_defaults)
        # end wxGlade

        self.hsub = parent.hsub
        self.proj = parent.proj
        self.robot = parent.robot

    def __set_properties(self):
        # begin wxGlade: handlerConfigDialog.__set_properties
        self.SetTitle("Configure XXXhandler")
        self.panel_configs.SetScrollRate(10, 10)
        self.button_OK.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: handlerConfigDialog.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(self.panel_configs, 1, wx.EXPAND, 0)
        sizer_26.Add(self.button_defaults, 0, wx.ALL, 5)
        sizer_26.Add((20, 20), 1, 0, 0)
        sizer_26.Add(self.button_OK, 0, wx.ALL, 5)
        sizer_26.Add(self.button_1, 0, wx.ALL, 5)
        sizer_10.Add(sizer_26, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_10)
        sizer_10.Fit(self)
        self.Layout()
        # end wxGlade

    def _onCalibEdit(self, event):
        r = event.GetRow()
        c = event.GetCol()
        self.robot.calibration_matrix[r,c] = self.sheet.GetCellValue(r,c)
        event.Skip()

    def _onClickCalibrate(self, event):
        event.Skip()

        # Check that a region file is associated
        if self.proj.rfi is None:
            wx.MessageBox("Please define regions before calibrating.", "Error",
                        style = wx.OK | wx.ICON_ERROR)
            return

        # Check that an init handler is selected
        if ht.InitHandler not in self.robot.handlers.keys():
            wx.MessageBox("Please choose an Initialization Handler before calibrating.", "Error",
                        style = wx.OK | wx.ICON_ERROR)
            return

        # Create a copy of the project in its current state
        proj_copy = deepcopy(self.proj)

        # Create a temp config with one robot, with
        # the currently selected init and pose handlers
        cfg = ExperimentConfig()
        robot = deepcopy(self.robot)

        cfg.name = 'calibrate'
        cfg.file_name = os.path.join(proj_copy.project_root, 'configs', 'calibrate.config')
        cfg.complete = True
        robot.name = "calibrate"
        robot.handlers[ht.PoseHandler] = self.handler

        # If the inithandler takes an init_region argument (i.e. playerstage, ODE), set it to the origin
        try:
            p = robot.handlers[ht.InitHandler].getMethodByName("__init__").getParaByName("init_region")
        except ValueError:
            pass
        else:
            p.setValue("__origin__")

        cfg.main_robot = robot.name
        cfg.robots.append(robot)
        proj_copy.current_config = cfg.name

        proj_copy.writeSpecFile(proj_copy.getFilenamePrefix()+".spec_calibtmp")
        cfg.saveConfig()

        print "Running calibration tool..."
        proc = subprocess.Popen(["python", "-u", "-m", "lib.calibrate", proj_copy.getFilenamePrefix() + ".spec_calibtmp", str(CALIB_PORT)])

        # Listen on socket for return value
        host = 'localhost'
        buf = 1024
        addr = (host, CALIB_PORT)

        UDPSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        UDPSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        UDPSock.settimeout(0.1)
        UDPSock.bind(addr)

        while proc.returncode is None:
            proc.poll()
            # Wait for and receive a message from the calibration tool

            try:
                data, addrFrom = UDPSock.recvfrom(1024)
            except socket.timeout:
                wx.Yield()
            else:
                try:
                    self.robot.calibration_matrix = eval(data)
                except SyntaxError:
                    print "ERROR: Received invalid data from calibration tool."
                else:
                    # Update the display
                    wx.CallAfter(self._handler2dialog, self.handler)

                break

        print "Connection with calibration tool closed."
        UDPSock.close()

        # delete files
        os.remove(proj_copy.getFilenamePrefix() + ".spec_calibtmp")
        os.remove(os.path.join(proj_copy.project_root, "configs", "calibrate.config"))


    def _handler2dialog(self, handler):
        self.handler = handler

        self.SetTitle("Configure %s.%s" % (handler.getType(), handler.name))
        methodObj = handler.getMethodByName('__init__')

        drawParamConfigPane(self.panel_configs, methodObj, self.proj)

        # Add in calibration configuration pane for pose handler
        if handler.h_type is ht.PoseHandler:
            # Default to identity matrix
            if self.robot.calibration_matrix is None:
                self.robot.calibration_matrix = eye(3)

            label = wx.StaticText(self.panel_configs, -1, "Calibration Matrix:")
            self.sheet = wx.grid.Grid(self.panel_configs)
            self.sheet.CreateGrid(3, 3)
            self.sheet.SetColLabelSize(0)
            self.sheet.SetRowLabelSize(0)
            for x in range(0,3):
                self.sheet.SetColFormatFloat(x)
                for y in range(0,3):
                    self.sheet.SetCellValue(x, y, str(self.robot.calibration_matrix[x,y]))

            button_calibrate = wx.Button(self.panel_configs, -1, "Run calibration tool...")

            self.panel_configs.GetSizer().Add(label, 0, wx.ALL, 5)
            self.Bind(wx.grid.EVT_GRID_CELL_CHANGE, self._onCalibEdit, self.sheet)
            self.panel_configs.GetSizer().Add(self.sheet, 0, wx.EXPAND | wx.ALL, 5)
            self.panel_configs.GetSizer().Add(button_calibrate, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
            self.Bind(wx.EVT_BUTTON, self._onClickCalibrate, button_calibrate)

            # If this robot has a pre-defined calibration matrix, don't allow for calibration
            if self.hsub.getRobotByType(self.robot.r_type).calibration_matrix is not None:
                button_calibrate.SetLabel("Calibration is pre-defined by simulator.")
                button_calibrate.Enable(False)

        self.panel_configs.Layout()
        # FIXME: this is a sizing hack, because I can't figure out how to get Fit() to work
        a = self.panel_configs.GetSizer().GetMinSize()
        b = self.GetSizer().GetMinSize()
        self.SetSize((max(a[0],b[0]),a[1]+b[1]))
        self.Refresh()


    def onClickDefaults(self, event): # wxGlade: handlerConfigDialog.<event_handler>
        print "Event handler `onClickDefaults' not implemented"
        event.Skip()

# end of class handlerConfigDialog


class simSetupDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: simSetupDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.list_box_experiment_name = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.button_cfg_new = wx.Button(self, wx.ID_NEW, "")
        self.button_cfg_import = wx.Button(self, wx.ID_ANY, "Import...")
        self.button_cfg_delete = wx.Button(self, wx.ID_DELETE, "")
        self.sizer_28_staticbox = wx.StaticBox(self, wx.ID_ANY, "Experiment Configurations:")
        self.label_9 = wx.StaticText(self, wx.ID_ANY, "Experiment Name: ")
        self.text_ctrl_sim_experiment_name = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_2 = wx.StaticText(self, wx.ID_ANY, "Custom Propositions:")
        self.list_box_init_customs = wx.CheckListBox(self, wx.ID_ANY, choices=["1", "2"])
        self.label_2_copy = wx.StaticText(self, wx.ID_ANY, "Action Propositions:")
        self.list_box_init_actions = wx.CheckListBox(self, wx.ID_ANY, choices=["3", "4"])
        self.button_edit_region_tags = wx.Button(self, wx.ID_ANY, "Edit region tags...")
        self.sizer_22_staticbox = wx.StaticBox(self, wx.ID_ANY, "Initial Conditions")
        self.label_1 = wx.StaticText(self, wx.ID_ANY, "Robots:")
        self.list_box_robots = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.button_addrobot = wx.Button(self, wx.ID_ANY, "Add robot...")
        self.button_2 = wx.Button(self, wx.ID_ANY, "Configure robot...")
        self.button_3 = wx.Button(self, wx.ID_ANY, "Remove robot")
        self.button_defaultrobot = wx.Button(self, wx.ID_ANY, "Set as Main Robot")
        self.button_4 = wx.Button(self, wx.ID_ANY, "Edit proposition mapping...")
        self.sizer_1_staticbox = wx.StaticBox(self, wx.ID_ANY, "Execution Environment")
        self.sizer_27_staticbox = wx.StaticBox(self, wx.ID_ANY, "Experiment Settings")
        self.button_sim_apply = wx.Button(self, wx.ID_APPLY, "")
        self.button_sim_ok = wx.Button(self, wx.ID_OK, "")
        self.button_sim_cancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.onSimLoad, self.list_box_experiment_name)
        self.Bind(wx.EVT_BUTTON, self.onConfigNew, self.button_cfg_new)
        self.Bind(wx.EVT_BUTTON, self.onConfigImport, self.button_cfg_import)
        self.Bind(wx.EVT_BUTTON, self.onConfigDelete, self.button_cfg_delete)
        self.Bind(wx.EVT_TEXT, self.onSimNameEdit, self.text_ctrl_sim_experiment_name)
        self.Bind(wx.EVT_BUTTON, self.onClickEditRegionTags, self.button_edit_region_tags)
        self.Bind(wx.EVT_BUTTON, self.onClickAddRobot, self.button_addrobot)
        self.Bind(wx.EVT_BUTTON, self.onClickConfigureRobot, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.onClickRemoveRobot, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.onSetMainRobot, self.button_defaultrobot)
        self.Bind(wx.EVT_BUTTON, self.onClickEditMapping, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.onClickApply, self.button_sim_apply)
        self.Bind(wx.EVT_BUTTON, self.onClickOK, self.button_sim_ok)
        self.Bind(wx.EVT_BUTTON, self.onClickCancel, self.button_sim_cancel)
        # end wxGlade

        self.Bind(wx.EVT_CHECKLISTBOX, self.onCheckProp, self.list_box_init_customs)
        self.Bind(wx.EVT_CHECKLISTBOX, self.onCheckProp, self.list_box_init_actions)
        self.list_box_experiment_name.Bind(wx.EVT_LEFT_DOWN, self.onLoseFocusSimName)

        self.Bind(wx.EVT_CLOSE, self.doClose)

        if len(sys.argv) < 2:
            print "You must specify a specification file."
            print "Usage: %s [spec_file]" % sys.argv[0]
            sys.exit(2)

        # Load project

        self.proj = project.Project()
        self.proj.loadProject(sys.argv[1])
        self.hsub = handlerSubsystem.HandlerSubsystem(None, self.proj.project_root)

        # Set up the list of configs
        self.list_box_experiment_name.Clear()
        print "Loading handlers..."
        self.hsub.loadAllHandlers()
        print "Loading robots..."
        self.hsub.loadAllRobots()
        print "Loading experiment configs..."
        self.hsub.loadAllConfigFiles()

        for cfg in self.hsub.configs:
            self.list_box_experiment_name.Append(cfg.name, cfg)

        if self.proj.current_config!= "" :
            self.list_box_experiment_name.SetStringSelection(self.proj.current_config)

        # Check for case where no config files are present
        if self.list_box_experiment_name.GetCount() == 0:
            # Create blank default config
            cfg = ExperimentConfig()
            # TODO: Check for existing untitleds and add a number at the end (steal from reged)
            cfg.name = "Untitled configuration"
            cfg.file_name = os.path.join(self.hsub.config_path,cfg.name.replace(' ','_'))
            # since this config is not loaded, we assume it is complete
            self.hsub.configs.append(cfg)
            self.list_box_experiment_name.Append(cfg.name, cfg)

        # By default, select the first one
        if self.list_box_experiment_name.GetSelection() < 0:
            self.list_box_experiment_name.SetSelection(0)

        self._cfg2dialog(self._getSelectedExperimentConfig())

    def __set_properties(self):
        # begin wxGlade: simSetupDialog.__set_properties
        self.SetTitle("Configure Execution")
        self.SetSize((935, 580))
        self.text_ctrl_sim_experiment_name.SetMinSize((300, 27))
        self.list_box_init_customs.SetSelection(0)
        self.list_box_init_actions.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: simSetupDialog.__do_layout
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_27_staticbox.Lower()
        sizer_27 = wx.StaticBoxSizer(self.sizer_27_staticbox, wx.VERTICAL)
        self.sizer_1_staticbox.Lower()
        sizer_1 = wx.StaticBoxSizer(self.sizer_1_staticbox, wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_22_staticbox.Lower()
        sizer_22 = wx.StaticBoxSizer(self.sizer_22_staticbox, wx.VERTICAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_28_staticbox.Lower()
        sizer_28 = wx.StaticBoxSizer(self.sizer_28_staticbox, wx.VERTICAL)
        sizer_29_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add((20, 20), 0, 0, 0)
        sizer_29.Add((20, 20), 0, 0, 0)
        sizer_28.Add((20, 10), 0, 0, 0)
        sizer_28.Add(self.list_box_experiment_name, 1, wx.EXPAND, 0)
        sizer_28.Add((20, 20), 0, 0, 0)
        sizer_29_copy.Add(self.button_cfg_new, 0, 0, 0)
        sizer_29_copy.Add((10, 20), 0, 0, 0)
        sizer_29_copy.Add(self.button_cfg_import, 0, 0, 0)
        sizer_29_copy.Add((10, 20), 0, 0, 0)
        sizer_29_copy.Add(self.button_cfg_delete, 0, 0, 0)
        sizer_28.Add(sizer_29_copy, 0, wx.EXPAND, 0)
        sizer_28.Add((20, 10), 0, 0, 0)
        sizer_29.Add(sizer_28, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_6.Add((20, 20), 0, 0, 0)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_30.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_30.Add((20, 20), 0, 0, 0)
        sizer_30.Add(self.text_ctrl_sim_experiment_name, 0, 0, 0)
        sizer_12.Add(sizer_30, 0, wx.EXPAND, 0)
        sizer_12.Add((20, 20), 0, 0, 0)
        sizer_23.Add((5, 20), 0, 0, 0)
        sizer_17.Add(self.label_2, 0, 0, 0)
        sizer_17.Add(self.list_box_init_customs, 1, wx.EXPAND, 0)
        sizer_23.Add(sizer_17, 1, wx.EXPAND, 0)
        sizer_23.Add((20, 20), 0, 0, 0)
        sizer_17_copy.Add(self.label_2_copy, 0, 0, 0)
        sizer_17_copy.Add(self.list_box_init_actions, 1, wx.EXPAND, 0)
        sizer_23.Add(sizer_17_copy, 1, wx.EXPAND, 0)
        sizer_23.Add((5, 20), 0, 0, 0)
        sizer_22.Add(sizer_23, 5, wx.EXPAND, 0)
        sizer_22.Add(self.button_edit_region_tags, 0, wx.LEFT | wx.TOP | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_27.Add(sizer_22, 1, wx.ALL | wx.EXPAND, 10)
        sizer_3.Add(self.label_1, 0, 0, 0)
        sizer_3.Add(self.list_box_robots, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add((20, 20), 0, 0, 0)
        sizer_4.Add(self.button_addrobot, 0, wx.BOTTOM, 5)
        sizer_4.Add(self.button_2, 0, wx.BOTTOM, 5)
        sizer_4.Add(self.button_3, 0, 0, 0)
        sizer_4.Add((20, 30), 0, 0, 0)
        sizer_4.Add(self.button_defaultrobot, 0, wx.BOTTOM, 5)
        sizer_4.Add(self.button_4, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_1, 0, wx.ALL | wx.EXPAND, 10)
        sizer_12.Add(sizer_27, 1, wx.EXPAND, 0)
        sizer_13.Add(self.button_sim_apply, 0, 0, 0)
        sizer_13.Add((10, 20), 0, 0, 0)
        sizer_13.Add(self.button_sim_ok, 0, 0, 0)
        sizer_13.Add((10, 20), 0, 0, 0)
        sizer_13.Add(self.button_sim_cancel, 0, 0, 0)
        sizer_13.Add((10, 10), 0, 0, 0)
        sizer_12.Add(sizer_13, 0, wx.ALIGN_RIGHT, 0)
        sizer_12.Add((20, 10), 0, 0, 0)
        sizer_6.Add(sizer_12, 2, wx.EXPAND, 0)
        sizer_6.Add((20, 20), 0, 0, 0)
        self.SetSizer(sizer_6)
        self.Layout()
        self.Centre()
        # end wxGlade

    def doClose(self, event):
        # TODO: Check for dirty?
        self.Destroy()

    def _cfg2dialog(self, cfg):
        self.text_ctrl_sim_experiment_name.SetValue(cfg.name)

        # Set up the initial actions checklist as appropriate
        self.list_box_init_actions.Set([])
        for i, action in enumerate(self.proj.all_actuators):
            self.list_box_init_actions.Insert(action, i)
            if action in cfg.initial_truths:
                self.list_box_init_actions.Check(i)

        # Set up the initial customs checklist as appropriate
        self.list_box_init_customs.Set([])
        for i, custom in enumerate(self.proj.all_customs):
            self.list_box_init_customs.Insert(custom, i)
            if custom in cfg.initial_truths:
                self.list_box_init_customs.Check(i)

        # Set up the robots list
        self.list_box_robots.Set([])
        for i, robot in enumerate(cfg.robots):
            if robot.name == cfg.main_robot:
                self.list_box_robots.Insert(robot.name + " (Main)", i, robot)
            else:
                self.list_box_robots.Insert(robot.name, i, robot)

        if len(cfg.robots) > 0:
            self.list_box_robots.Select(0)

    def onLoseFocusSimName(self, event):
        if len(self.text_ctrl_sim_experiment_name.GetValue().strip()) == 0:
            d = wx.MessageDialog(self, "Current experiment config needs a name. Please add one.", style = wx.OK | wx.ICON_ERROR)
            d.ShowModal()
            event.Skip(False)
            return

        if  [c.name.strip() for c in self.hsub.configs].count(self.text_ctrl_sim_experiment_name.GetValue().strip()) > 1:
            d = wx.MessageDialog(self, "Current experiment config has the same name with another config. Please change it.", style = wx.OK | wx.ICON_ERROR)
            d.ShowModal()
            event.Skip(False)
            return

        event.Skip()

    def onSimLoad(self, event): # wxGlade: simSetupDialog.<event_handler>
        cfg = event.GetClientData()
        if cfg is not None:
            self._cfg2dialog(cfg)
        event.Skip()

    def onConfigNew(self, event): # wxGlade: simSetupDialog.<event_handler>
        # Create blank default config
        cfg = ExperimentConfig()

        # TODO: Check for existing untitleds and add a number at the end (steal from reged)
        cfg.name = "Untitled configuration"
        cfg.name = self._normalizeConfigName(cfg.name)
        cfg.file_name = os.path.join(self.hsub.config_path, cfg.name.replace(' ','_'))
        # since this config is not loaded, we assume it is complete
        self.hsub.configs.append(cfg)

        self.list_box_experiment_name.Append(cfg.name, cfg)
        self.list_box_experiment_name.Select(self.list_box_experiment_name.GetCount()-1)
        self._cfg2dialog(cfg)
        event.Skip()

    def _normalizeConfigName(self, name):
        """ Make sure the config name is not taken already"""
        # Make sure another config doesn't already have this name
        while name in (r.name for r in self.hsub.configs):
            name = name + " copy"
        return name

    def onConfigImport(self, event): # wxGlade: simSetupDialog.<event_handler>
        file_name = wx.FileSelector("Import Config File", default_extension="config",
                                  wildcard="Experiment config files (*.config)|*.config",
                                  flags = wx.OPEN | wx.FILE_MUST_EXIST)
        if file_name == "": return

        # import the config file
        cfg = ExperimentConfig()
        cfg.fromFile(file_name, self.hsub)
        cfg.name = self._normalizeConfigName(cfg.name)
        self.hsub.configs.append(cfg)
        self.list_box_experiment_name.Append(cfg.name, cfg)
        self.list_box_experiment_name.Select(self.list_box_experiment_name.GetCount()-1)
        self._cfg2dialog(cfg)

        event.Skip()

    def onConfigDelete(self, event): # wxGlade: simSetupDialog.<event_handler>
        if self.list_box_experiment_name.GetSelection() == -1:
            return

        numel = self.list_box_experiment_name.GetCount()
        if numel > 1:  # don't allow deletion of final remaining element
            # TODO: gray out button when no action possible
            pos = self.list_box_experiment_name.GetSelection()
            self.list_box_experiment_name.Delete(pos)
            self.hsub.configs.pop(pos)

            if pos == numel - 1:
                # If the very last element was deleted, move the selection up one
                newpos = pos - 1
            else:
                newpos = pos

            self.list_box_experiment_name.Select(newpos)
            self._cfg2dialog(self.list_box_experiment_name.GetClientData(newpos))

        event.Skip()

    def onSimNameEdit(self, event): # wxGlade: simSetupDialog.<event_handler>
        pos = self.list_box_experiment_name.GetSelection()
        self.list_box_experiment_name.GetClientData(pos).name = event.GetString().strip()
        self.list_box_experiment_name.SetString(pos, event.GetString().strip())
        event.Skip()

    def onClickAddRobot(self, event): # wxGlade: simSetupDialog.<event_handler>
        dlg = addRobotDialog(self, None, -1, "")
        if dlg.ShowModal() != wx.ID_CANCEL:
            obj = self._getSelectedExperimentConfig()
            obj.robots += [dlg.robot]

            if obj.main_robot == '':
                obj.main_robot = dlg.robot.name
            self._cfg2dialog(obj)
        dlg.Destroy()
        event.Skip()

    def onClickConfigureRobot(self, event): # wxGlade: simSetupDialog.<event_handler>
        # TODO: gray out button when no action possible
        if self.list_box_robots.GetSelection() == -1:
            return

        dlg = addRobotDialog(self, None, -1, "")

        pos = self.list_box_robots.GetSelection()
        r = self.list_box_robots.GetClientData(pos)
        dlg._robot2dialog(deepcopy(r), original=True)
        if dlg.ShowModal() != wx.ID_CANCEL:
            obj = self._getSelectedExperimentConfig()

            # Update the name of the main robot if necessary
            if obj.main_robot == obj.robots[pos].name:
                obj.main_robot = dlg.robot.name

            # Update any propmappings with new name, if necessary
            for k,v in obj.prop_mapping.iteritems():
                obj.prop_mapping[k] = re.sub("^"+r.name+"\.", dlg.robot.name+".", v)

            obj.robots[pos] = dlg.robot
            self._cfg2dialog(obj)
        dlg.Destroy()
        event.Skip()


    def onClickRemoveRobot(self, event): # wxGlade: simSetupDialog.<event_handler>
        if self.list_box_robots.GetSelection() == -1:
            return

        numel = self.list_box_robots.GetCount()
        obj = self._getSelectedExperimentConfig()

        # TODO: gray out button when no action possible
        if numel > 0:
            pos = self.list_box_robots.GetSelection()

            # Clear the main_robot string if we're deleting that robot
            if obj.main_robot == obj.robots[pos].name:
                obj.main_robot = ''

            obj.robots.pop(pos)
            self._cfg2dialog(obj)

            if pos == numel - 1:
                # If the very last element was deleted, move the selection up one
                newpos = pos -1
            else:
                newpos = pos

            if pos != -1:
                self.list_box_robots.Select(newpos)

        event.Skip()

    def onClickEditMapping(self, event): # wxGlade: simSetupDialog.<event_handler>
        dlg = propMappingDialog(self, None, -1, "")
        obj = self._getSelectedExperimentConfig()
        dlg._mapping2dialog(deepcopy(obj.prop_mapping))
        if dlg.ShowModal() != wx.ID_CANCEL:
            obj.prop_mapping = dlg.mapping
        dlg.Destroy()
        event.Skip()


    def onClickApply(self, event): # wxGlade: simSetupDialog.<event_handler>

        # Get the current experiment config
        self.proj.current_config = self._getSelectedExperimentConfig().name
        self.hsub.setExecutingConfig(self.proj.current_config)

        if len(self.hsub.executing_config.robots) == 0:
            d = wx.MessageDialog(self, "There is no robot in the current experiment config. Please add one before saving.", style = wx.OK | wx.ICON_ERROR)
            d.ShowModal()
            event.Skip(False)
            return

        if len(self.hsub.executing_config.name) == 0:
            d = wx.MessageDialog(self, "Current experiment config needs a name. Please add one before saving.", style = wx.OK | wx.ICON_ERROR)
            d.ShowModal()
            event.Skip(False)
            return

        if  [c.name.strip() for c in self.hsub.configs].count(self.text_ctrl_sim_experiment_name.GetValue().strip()) > 1:
            d = wx.MessageDialog(self, "Current experiment config has the same name with another config. Please change it.", style = wx.OK | wx.ICON_ERROR)
            d.ShowModal()
            event.Skip(False)
            return

        # clean up prop_mapping of the current executing config
        default_prop_mapping = self.hsub.getDefaultPropMapping(self.proj.all_sensors, self.proj.all_actuators)
        self.hsub.executing_config.normalizePropMapping(default_prop_mapping)

        # Save the config files
        self.hsub.saveAllConfigFiles()

        # Save the name of the currently active config in the spec file
        self.proj.writeSpecFile()

        event.Skip()

    def onClickOK(self, event): # wxGlade: simSetupDialog.<event_handler>
        self.onClickApply(event)

        # Clean up
        if event.GetSkipped():
            self.doClose(event)
            event.Skip()

    def _getSelectedExperimentConfig(self):
        pos = self.list_box_experiment_name.GetSelection()
        obj = self.list_box_experiment_name.GetClientData(pos)
        return obj

    def onCheckProp(self, event): # wxGlade: simSetupDialog.<event_handler>
        obj = event.GetEventObject()
        i = event.GetInt()
        newstate = obj.IsChecked(i)
        name = obj.GetString(i)

        obj = self._getSelectedExperimentConfig()

        if newstate == True:
            obj.initial_truths += [name]
        else:
            obj.initial_truths.remove(name)

        event.Skip()

    def onSetMainRobot(self, event): # wxGlade: simSetupDialog.<event_handler>
        pos = self.list_box_robots.GetSelection()
        obj = self.list_box_robots.GetClientData(pos)

        if obj is None:
            return

        self._getSelectedExperimentConfig().main_robot = obj.name
        self._cfg2dialog(self._getSelectedExperimentConfig())
        self.list_box_robots.SetSelection(pos)
        event.Skip()

    def onClickCancel(self, event): # wxGlade: simSetupDialog.<event_handler>
        # Clean up
        self.doClose(event)
        event.Skip()

    def onClickEditRegionTags(self, event):  # wxGlade: simSetupDialog.<event_handler>
        dlg = regionTagsDialog(self, None, -1, "")
        obj = self._getSelectedExperimentConfig()
        dlg._tags2dialog(deepcopy(obj.region_tags))
        if dlg.ShowModal() != wx.ID_CANCEL:
            obj.region_tags = dlg.tags
        dlg.Destroy()
        event.Skip()

# end of class simSetupDialog


class addRobotDialog(wx.Dialog):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: addRobotDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_3 = wx.StaticText(self, wx.ID_ANY, "Robot type:")
        self.combo_box_robottype = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.label_4 = wx.StaticText(self, wx.ID_ANY, "Robot name:")
        self.text_ctrl_robotname = wx.TextCtrl(self, wx.ID_ANY, "")
        self.static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        self.button_7 = wx.Button(self, wx.ID_CANCEL, "")
        self.button_6 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.onChooseRobot, self.combo_box_robottype)
        self.Bind(wx.EVT_TEXT, self.onEditRobotName, self.text_ctrl_robotname)
        self.Bind(wx.EVT_BUTTON, self.onClickOK, self.button_6)
        # end wxGlade

        self.parent = parent
        self.hsub = parent.hsub
        self.proj = parent.proj
        self.robot = RobotConfig()
        self.original_robot = RobotConfig()

        self.handler_labels = {}
        self.handler_combos = {}
        self.handler_buttons = {}

        for handler_type_name in  ht.getAllHandlerTypeName():
            handler_type_class = ht.getHandlerTypeClass(handler_type_name)

            self.handler_labels[handler_type_class] = wx.StaticText(self, -1, "%s handler:" % handler_type_name)
            self.handler_combos[handler_type_class] = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY)
            self.handler_buttons[handler_type_class] = wx.Button(self, -1, "Configure...")
            self.sizer_9.Add(self.handler_labels[handler_type_class], 0, wx.ALL|wx.ALIGN_RIGHT, 0)
            self.sizer_9.Add(self.handler_combos[handler_type_class], 1, wx.ALL|wx.EXPAND, 0)
            self.sizer_9.Add(self.handler_buttons[handler_type_class], 0, wx.ALL, 0)
            self.Bind(wx.EVT_BUTTON, self.onClickConfigure, self.handler_buttons[handler_type_class])
            self.Bind(wx.EVT_COMBOBOX, self.onChangeHandler, self.handler_combos[handler_type_class])

        self.Layout()
        self.SetSizeHints(self.GetSize()[0], 0)  # Force width to stay the same
        self.Fit()

        # Set up the list of robot types
        self.combo_box_robottype.Clear()

        for r in self.parent.hsub.robot_configs:
            self.combo_box_robottype.Append(r.r_type + (" (Not successfully loaded)" if not self.robot.successfully_loaded else ""))

    def _populateHandlerCombos(self):
        # Populate based on current robot type
        for handler_type_class in ht.getAllHandlerTypeClass():
            self.handler_combos[handler_type_class].Clear()
            self.handler_combos[handler_type_class].SetValue("")
            self.handler_buttons[handler_type_class].Enable(False)

            # Load handlers under this robot
            if handler_type_class in self.parent.hsub.handler_configs[self.robot.r_type]:
                for handler_config in self.parent.hsub.handler_configs[self.robot.r_type][handler_type_class]:
                    self.handler_combos[handler_type_class].Insert(handler_config.name, 0, handler_config)

            # Load handlers under shared folder for pose, motionControl, drive
            if handler_type_class in self.parent.hsub.handler_configs['share'] and \
                    handler_type_class in [ht.PoseHandler, ht.MotionControlHandler, ht.DriveHandler]:
                for handler_config in self.parent.hsub.handler_configs['share'][handler_type_class]:
                    self.handler_combos[handler_type_class].Insert(handler_config.name, 0, handler_config)

    def __set_properties(self):
        # begin wxGlade: addRobotDialog.__set_properties
        self.SetTitle("Add/Configure Robot")
        self.SetSize((637, 410))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: addRobotDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.FlexGridSizer(0, 3, 2, 7)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(self.label_3, 0, wx.ALL, 5)
        sizer_7.Add(self.combo_box_robottype, 1, wx.ALL, 5)
        sizer_5.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_8.Add(self.label_4, 0, wx.ALL, 5)
        sizer_8.Add(self.text_ctrl_robotname, 1, wx.ALL, 5)
        sizer_5.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_5.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_9.AddGrowableCol(1)
        sizer_5.Add(sizer_9, 1, wx.ALL | wx.EXPAND, 10)
        sizer_5.Add((20, 5), 0, wx.EXPAND, 0)
        sizer_11.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_11.Add(self.button_7, 0, wx.ALL, 5)
        sizer_11.Add(self.button_6, 0, wx.ALL, 5)
        sizer_5.Add(sizer_11, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        self.Layout()
        # end wxGlade
        self.sizer_9 = sizer_9

    def _robot2dialog(self, robot, original=False):
        """
        Update the GUI based on a robot object.
        If `original` is True, save a reference to allow for reversion to defaults.
        """

        self.robot = robot
        if original:
            self.original_robot = deepcopy(robot)
        self.combo_box_robottype.SetStringSelection(self.robot.r_type + (" (Not successfully loaded)" if not self.robot.successfully_loaded else ""))
        self.text_ctrl_robotname.SetValue(self.robot.name)
        self._populateHandlerCombos()

        for handler_type_class, handler_config in self.robot.handlers.iteritems():
            # for each handler type, a robot can only have one handler config
            self.handler_combos[handler_type_class].SetValue("")

            self.handler_combos[handler_type_class].SetStringSelection(handler_config.name)

            # Disable the "Configure" button if there are no parameters (with an exception for pose)
            if len(handler_config.getMethodByName("__init__").para) == 0 and \
                    handler_config.h_type is not ht.PoseHandler:
                self.handler_buttons[handler_type_class].Enable(False)
            else:
                self.handler_buttons[handler_type_class].Enable(True)

            if self.handler_combos[handler_type_class].GetStringSelection() == "":
                # when neither the robot or the share folder has the handler loaded
                logging.warning('Cannot find and handler config in the options for handler type {!r}'\
                        .format(handler_type_class))
                self.handler_buttons[handler_type_class].Enable(False)

    def onClickConfigure(self, event):
        src = event.GetEventObject()
        # Figure out which "Configure..." button was pressed
        for htype, b in self.handler_buttons.iteritems():
            if src is b:
                # TODO: gray out button when no action possible
                if self.handler_combos[htype].GetValue() == "":
                    return

                dlg = handlerConfigDialog(self, None, -1, "")

                # Edit existing handler object
                dlg._handler2dialog(deepcopy(self.robot.handlers[htype]))

                if dlg.ShowModal() != wx.ID_CANCEL:
                    self.robot.handlers[htype] = dlg.handler
                    #self._robot2dialog(self.robot)

                dlg.Destroy()
                break

        event.Skip()

    def onChangeHandler(self, event):
        src = event.GetEventObject()

        # Figure out which handler was changed
        for htype, b in self.handler_combos.iteritems():
            if src is b:
                hname = src.GetValue()

                # If this handler has default values from the selected robot file, use them
                # TODO: this will erase any previous config settings...
                default_robot = self.parent.hsub.getRobotByType(self.robot.r_type)
                handler_config_changed = default_robot.getHandlerOfRobot(htype)
                if handler_config_changed.name != hname:
                    handler_config_changed = None

                if handler_config_changed is None:
                    # just grab the plain handler
                    rname = self.robot.r_type
                    handler_config_changed = self.parent.hsub.getHandlerConfigDefault(rname, htype, hname)

                if handler_config_changed is None:
                    # this handler might be a shared one
                    rname = 'share'
                    handler_config_changed = self.parent.hsub.getHandlerConfigDefault(rname, htype, hname)

                if handler_config_changed is not None:
                    self.robot.handlers[htype] = handler_config_changed
                else:
                    logging.warning('Cannot find the selected handler config.')

                break

        self._robot2dialog(self.robot)

        event.Skip()

    def _normalizeRobotName(self, name):
        """ Clean a robot name and make sure it's not taken already"""

        # Disallow empty names, because that would be super confusing
        if name is None or name == "":
            raise ValueError("Your robot needs a name!")

        # Replace spaces and non-alphanums with underscores
        name = re.sub(r"\W", "_", name.strip())

        # Make sure another robot doesn't already have this name
        if name != self.original_robot.name and \
           name in (r.name for r in self.parent._getSelectedExperimentConfig().robots):
            raise ValueError('Current configuration already contains a robot with name "{}".\n\nPlease rename.'.format(name))

        return name

    def onClickOK(self, event): # wxGlade: addRobotDialog.<event_handler>
        # TODO: add in checks for all combo boxes (don't allow null handlers)

        # Make sure that all required handler parameters have been specified
        incomplete_params = []
        for h_type, handler in self.robot.handlers.iteritems():
            for param in handler.getMethodByName("__init__").para:
                if param.getValue() is None:
                    incomplete_params.append((handler.name, param.name))

        if len(incomplete_params) > 0:
            wx.MessageBox("The following parameters need to be specified:\n" + \
                          "\n".join(["  - {}.{}".format(hn, pn) for hn, pn in incomplete_params]),
                           "Error", style = wx.OK | wx.ICON_ERROR)
            event.Skip(False)
            return

        # Make sure the robot name is OK
        try:
            self.robot.name = self._normalizeRobotName(self.robot.name)
        except ValueError as e:
            wx.MessageBox(e.message, "Error", style = wx.OK | wx.ICON_ERROR)
            event.Skip(False)
            return
        event.Skip()

    def onChooseRobot(self, event): # wxGlade: addRobotDialog.<event_handler>
        # Strip the trailing note
        robot_type = event.GetEventObject().GetValue().replace(" (Not successfully loaded)", "")
        self.robot = deepcopy(self.parent.hsub.getRobotByType(robot_type))
        self._robot2dialog(self.robot)
        event.Skip()

    def onEditRobotName(self, event): # wxGlade: addRobotDialog.<event_handler>
        self.robot.name = event.GetString()
        event.Skip()

# end of class addRobotDialog


class propMappingDialog(wx.Dialog):
    def __init__(self, parent, *args, **kwds):
        # begin wxGlade: propMappingDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER | wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_6 = wx.StaticText(self, wx.ID_ANY, "Propositions:")
        self.list_box_props = wx.ListBox(self, wx.ID_ANY, choices=[], style=wx.LB_SINGLE | wx.LB_ALWAYS_SB)
        self.label_11 = wx.StaticText(self, wx.ID_ANY, "Continuous controller mapping:")
        self.text_ctrl_mapping = wx.richtext.RichTextCtrl(self, wx.ID_ANY, "")
        self.button_9 = wx.Button(self, wx.ID_ANY, "        ^\nInsert/Apply")
        self.label_7 = wx.StaticText(self, wx.ID_ANY, "Robots:")
        self.list_box_robots = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.label_8 = wx.StaticText(self, wx.ID_ANY, "Sensors/Actuators:")
        self.list_box_functions = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.label_10 = wx.StaticText(self, wx.ID_ANY, "Parameters:")
        self.panel_method_cfg = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.button_11 = wx.Button(self, wx.ID_OK, "")
        self.button_10 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.onSelectProp, self.list_box_props)
        self.Bind(wx.EVT_TEXT, self.onEditMapping, self.text_ctrl_mapping)
        self.Bind(wx.EVT_BUTTON, self.onClickApply, self.button_9)
        self.Bind(wx.EVT_LISTBOX, self.onSelectRobot, self.list_box_robots)
        self.Bind(wx.EVT_LISTBOX, self.onSelectHandler, self.list_box_functions)
        self.Bind(wx.EVT_BUTTON, self.onClickOK, self.button_10)
        # end wxGlade

        self.text_ctrl_mapping.Bind(wx.EVT_TEXT, self.onEditMapping)
        self.text_ctrl_mapping.Bind(wx.EVT_LEFT_UP, self.onClickMapping)
        #self.Bind(wx.EVT_LEFT_UP, self.onClickMapping, self.text_ctrl_mapping)
        #self.text_ctrl_mapping.Bind(wx.EVT_LEFT_DOWN, self.onClickMapping)
        self.text_ctrl_mapping.Bind(wx.EVT_KEY_UP, self.onClickMapping)
        self.text_ctrl_mapping.Bind(wx.EVT_KEY_DOWN, self.onClickMapping)

        self.proj = parent.proj
        self.hsub = parent.hsub
        self.robots = parent._getSelectedExperimentConfig().robots

        # Set up the list of robots

        for i, r in enumerate(self.robots):
            self.list_box_robots.Insert("%s (%s)" % (r.name, r.r_type), i, r)

        self.list_box_robots.Append("(Simulated)")
        self.list_box_robots.SetSelection(0)

        # Set up the list of props
        self.list_box_props.Clear()

        self.list_box_props.Append("=== Sensors ===")
        #self.list_box_props.SetItemFont(n, wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        #self.list_box_props.SetItemBackgroundColour(n, wx.Color(100,100,100))

        for p in self.proj.all_sensors:
            self.list_box_props.Append(p)

        self.list_box_props.Append("")
        self.list_box_props.Append("=== Actuators ===")

        for p in self.proj.all_actuators:
            self.list_box_props.Append(p)

        self.mapping = None
        self.tempMethod = None

        self.list_box_props.SetSelection(0)
        self.onSelectProp(None)

    def _mapping2dialog(self, mapping):
        self.mapping = mapping

        # Set defaults as necessary
        for p in self.proj.all_sensors:
            if p not in mapping or self.mapping[p].strip() == "":
                m = deepcopy(self.hsub.handler_configs["share"][ht.SensorHandler][0].getMethodByName("buttonPress"))
                para = m.getParaByName("button_name")
                para.setValue(p)
                self.mapping[p] = self.hsub.method2String(m, "share")

        for p in self.proj.all_actuators:
            if p not in mapping or self.mapping[p].strip() == "":
                m = deepcopy(self.hsub.handler_configs["share"][ht.ActuatorHandler][0].getMethodByName("setActuator"))
                para = m.getParaByName("name")
                para.setValue(p)
                self.mapping[p] = self.hsub.method2String(m, "share")

    def __set_properties(self):
        # begin wxGlade: propMappingDialog.__set_properties
        self.SetTitle("Proposition Mapping")
        self.SetSize((981, 419))
        self.panel_method_cfg.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: propMappingDialog.__do_layout
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_15.Add(self.label_6, 0, wx.LEFT | wx.RIGHT | wx.TOP, 5)
        sizer_15.Add(self.list_box_props, 1, wx.ALL | wx.EXPAND, 5)
        sizer_14.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_16.Add(self.label_11, 0, wx.ALL, 5)
        sizer_16.Add(self.text_ctrl_mapping, 1, wx.ALL | wx.EXPAND, 5)
        sizer_18.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_18.Add(self.button_9, 0, wx.ALL, 5)
        sizer_18.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_16.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_20.Add(self.label_7, 0, wx.ALL, 5)
        sizer_20.Add(self.list_box_robots, 1, wx.ALL | wx.EXPAND, 5)
        sizer_19.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_21.Add(self.label_8, 0, wx.ALL, 5)
        sizer_21.Add(self.list_box_functions, 1, wx.ALL | wx.EXPAND, 5)
        sizer_19.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_24.Add(self.label_10, 0, wx.ALL, 5)
        sizer_24.Add(self.panel_method_cfg, 1, wx.ALL | wx.EXPAND, 5)
        sizer_19.Add(sizer_24, 3, wx.EXPAND, 0)
        sizer_16.Add(sizer_19, 5, wx.EXPAND, 0)
        sizer_25.Add((20, 20), 1, wx.EXPAND, 0)
        sizer_25.Add(self.button_11, 0, wx.ALL, 5)
        sizer_25.Add(self.button_10, 0, wx.ALL, 5)
        sizer_16.Add(sizer_25, 0, wx.EXPAND, 0)
        sizer_14.Add(sizer_16, 4, wx.EXPAND, 0)
        self.SetSizer(sizer_14)
        self.Layout()
        # end wxGlade

    def onSelectProp(self, event): # wxGlade: propMappingDialog.<event_handler>
        # If you've selected a header, not a proposition, then gray out the edit box
        if self.list_box_props.GetStringSelection().startswith("===") or self.list_box_props.GetStringSelection() == "":
            self.text_ctrl_mapping.Enable(False)
            self.text_ctrl_mapping.SetValue("")
            self.list_box_robots.Enable(False)
            self.list_box_functions.Clear()
            self.list_box_functions.Enable(False)
        else:
            self.text_ctrl_mapping.Enable(True)
            self.list_box_robots.Enable(True)
            self.list_box_functions.Enable(True)
            self.onSelectRobot(None)

            if event.GetString() in self.mapping:
                self.text_ctrl_mapping.SetValue(self.mapping[event.GetString()])
            else:
                self.text_ctrl_mapping.SetValue("")

        # Auto-select the first term
        self.onClickMapping(None)

        if event is not None:
            event.Skip()

    def onClickApply(self, event): # wxGlade: propMappingDialog.<event_handler>
        if self.tempMethod is not None:
            #for p in self.tempMethod.para:
            #    print p.name, p.value

            rname = self.list_box_robots.GetStringSelection().split(" ")[0]
            if rname == "(Simulated)":
                rname = "share"
            method_string = self.hsub.method2String(self.tempMethod, rname)
            if method_string is None:
                print "ERROR: Method cannot be mapped to string"
            else:
                start, end = self.text_ctrl_mapping.GetSelection()
                if start < 0:
                    # If nothing is selected, just insert
                    start = self.text_ctrl_mapping.GetInsertionPoint()
                    end = start

                self.text_ctrl_mapping.Replace(start, end, method_string)
                self.text_ctrl_mapping.SetSelection(start, start + len(method_string))
        event.Skip()

    def onSelectRobot(self, event): # wxGlade: propMappingDialog.<event_handler>
        # Populate list of functions
        self.list_box_functions.Clear()
        pos = self.list_box_robots.GetSelection()
        r = self.list_box_robots.GetClientData(pos)

        # Only show sensors for sensor props, and actuators for actuator props
        if self.list_box_props.GetStringSelection() in self.proj.all_sensors:
            if self.list_box_robots.GetStringSelection() == "(Simulated)":
                # TODO: might there be more than one type of handler in share?
                methods = self.hsub.handler_configs["share"][ht.SensorHandler][0].methods
            else:
                methods = getattr(r.getHandlerOfRobot(ht.SensorHandler), 'methods', [])

        elif self.list_box_props.GetStringSelection() in self.proj.all_actuators:
            if self.list_box_robots.GetStringSelection() == "(Simulated)":
                # TODO: might there be more than one type of handler in share?
                methods = self.hsub.handler_configs["share"][ht.ActuatorHandler][0].methods
            else:
                methods = getattr(r.getHandlerOfRobot(ht.ActuatorHandler), 'methods', [])
        else:
            print ("WARNING: Selected proposition '%s' that is neither sensor nor actuator. " +
                  "This should be impossible.") % (self.list_box_props.GetStringSelection())

        for i, m in enumerate([m for m in methods if not m.name.startswith("_")]):
            self.list_box_functions.Insert("%s" % (m.name), i, m)

        if event is not None:
            event.Skip()

    def onSelectHandler(self, event): # wxGlade: propMappingDialog.<event_handler>
        if event is not None:
            event.Skip()

        pos = self.list_box_functions.GetSelection()

        if pos < 0:
            if self.panel_method_cfg.GetSizer() is not None:
                self.panel_method_cfg.GetSizer().Clear(deleteWindows=True)
            return

        m = self.list_box_functions.GetClientData(pos)
        self.tempMethod = deepcopy(m)
        drawParamConfigPane(self.panel_method_cfg, self.tempMethod, self.proj)
        self.Layout()


    def onClickOK(self, event): # wxGlade: propMappingDialog.<event_handler>
        #print "Event handler `onClickOK' not implemented!"
        event.Skip()

    def onClickMapping(self, event):
        if event is not None:
            event.Skip()

            if event.GetEventType() in [wx.wxEVT_KEY_DOWN, wx.wxEVT_KEY_UP] and \
               event.GetKeyCode() not in [wx.WXK_LEFT, wx.WXK_RIGHT, wx.WXK_UP, wx.WXK_DOWN, wx.WXK_HOME, wx.WXK_END,
                                          wx.WXK_NUMPAD_LEFT, wx.WXK_NUMPAD_RIGHT, wx.WXK_NUMPAD_UP, wx.WXK_NUMPAD_DOWN]:
            #                              wx.WXK_BACK, wx.WXK_DELETE]:
                return
            # TODO: Make backspace work as expected; maybe colorize/bold

            i = self.text_ctrl_mapping.GetInsertionPoint()

            # Special case for beginning or end of field
            if i == 0 or i == self.text_ctrl_mapping.GetLastPosition():
                self.text_ctrl_mapping.SelectNone()
                return
        else:
            # Select first term
            i = 1

        s = self.text_ctrl_mapping.GetValue()

        # Don't bother going any further if it's blank
        if s.strip() == "":
            return

        start, end = self.text_ctrl_mapping.GetSelection()
        if start >= 0:
            # If something is selected, check to make sure neither side is inside a methodstring
            check_pts = [start, end]
        else:
            # Otherwise just make sure the insertion point hasn't moved inside a methodstring
            check_pts = [i]

        try:
            cds, _ = parseCallString(s, mode="sensor")  # Sensor mode is more lenient than actuator
        except SyntaxError:
            # If there was a parsing error, it's not a proper methodstring anyways
            return

        cd_local = None

        for cd in cds:
            if any([i > cd.start_pos and i < cd.end_pos for i in check_pts]):
                cd_local = cd
                break

        if cd_local is None:
            return

        # Make sure the name is the correct length
        if len(cd_local.name) != 3:
            return

        # Make sure the robot name is valid
        rname = cd_local.name[0]
        if rname == "share":
            rname = "(Simulated)"
        corresponding_robots = [n for n in self.list_box_robots.GetItems() if n.startswith(rname)]

        if len(corresponding_robots) != 1:
            print "WARNING: No unique robot corresponding to name '%s'." % m.group("robot_name")
            return

        # Force selection of the entire keyword, and place insertion caret as appropriate
        self.text_ctrl_mapping.SetSelection(cd_local.start_pos, cd_local.end_pos)

        if event is not None:
            if event.GetEventType() in [wx.wxEVT_KEY_DOWN, wx.wxEVT_KEY_UP]:
                if event.GetKeyCode() in [wx.WXK_LEFT, wx.WXK_HOME, wx.WXK_UP, wx.WXK_NUMPAD_LEFT, wx.WXK_NUMPAD_UP]:
                    self.text_ctrl_mapping.MoveCaret(cd_local.start_pos-1)
                elif event.GetKeyCode() in [wx.WXK_RIGHT, wx.WXK_END, wx.WXK_DOWN, wx.WXK_NUMPAD_RIGHT, wx.WXK_NUMPAD_DOWN]:
                    self.text_ctrl_mapping.MoveCaret(cd_local.end_pos-1)

        # Load detailed view of keyword below
        self.list_box_robots.SetStringSelection(corresponding_robots[0])
        self.onSelectRobot(None)
        self.list_box_functions.SetStringSelection(cd_local.name[2])

        self.tempMethod = self.hsub.string2Method(s[cd_local.start_pos:cd_local.end_pos], self.robots)
        drawParamConfigPane(self.panel_method_cfg, self.tempMethod, self.proj)
        self.Layout()

    def onEditMapping(self, event): # wxGlade: propMappingDialog.<event_handler>
        if not self.text_ctrl_mapping.IsEnabled():
            return

        prop_name = self.list_box_props.GetStringSelection()
        self.mapping[prop_name] = self.text_ctrl_mapping.GetValue()

        event.Skip()

# end of class propMappingDialog


if __name__ == "__main__":
    SimConfigEditor = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    SimSetupDialog = simSetupDialog(None, -1, "")
    SimConfigEditor.SetTopWindow(SimSetupDialog)
    SimSetupDialog.Show()
    SimConfigEditor.MainLoop()
